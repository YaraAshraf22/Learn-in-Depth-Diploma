/*
 * STM32_F103C6_EXTI_Driver.c
 *
 *  Created on: Aug 23, 2024
 *      Author: Yara Ashraf
 */

#include "STM32_F103C6_EXTI_Driver.h"

/*
 * ==================================================================================
 * 								Generic Variable
 * ==================================================================================
 */

void(*GP_IRQ_CallBack[15])(void);

/*
 * ==================================================================================
 * 								Generic Macros
 * ==================================================================================
 */

#define AFIO_GPIO_EXTI_Mapping(x)	((x == GPIOA)? 0:\
		(x == GPIOB)? 1:\
				(x == GPIOC)? 2:\
						(x == GPIOD)? 3: 0)

/*
 * ==================================================================================
 * 								Generic Functions
 * ==================================================================================
 */

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
	//1- configure GPIO to be AF INPUT -> Floating INPUT
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
	PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);

	//2- Update AFIO to Route between EXTI Line with PORT A,B,C,D
	//Ex: EXTI15 > 15/4 = index 3 >> Register EXTICR[3] >> AFIO_EXTICR4
	// 15%4 = 3 * 4 = bit 12 in AFIO_EXTICR4
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4;

	//Clear 4-bits for EXTI Input Line before setting them
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_position);

	//=====================================================
	//3- Update EXTI Trigger: Rising or Falling Edge
	//Reset value of trigger event configuration bit of EXTI_InputLineNumber
	EXTI->RTSR &= ~ (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	EXTI->FTSR &= ~ (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
	else if (EXTI_Config ->Trigger_Case == EXTI_Trigger_FALLING)
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
	else if (EXTI_Config -> Trigger_Case == EXTI_Trigger_RISING_AND_FALLING)
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

	//=====================================================
	//4- Update IRQ Handling Callback
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack; //Save addr of callback Fn in app layer to be able to call the Fn when Interrupt occurs

	//=====================================================
	//5- Enable/Disable IRQ

}

/*
 * ==================================================================================
 * 								API Functions Definitions
 * ==================================================================================
 */

/**================================================================
 * @Fn			-MCAL_EXTI_GPIO_DeInit
 * @brief 		-Reset EXTI registers and NVIC corresponding to IRQ Mask
 * @param [in] 	-none
 * @retval 		-none
 * Note			-RCC doesn't have access to reset EXTI so registers will be reset manually
 */
void MCAL_EXTI_GPIO_DeInit (void)
{
	EXTI->IMR	= 0x00000000;
	EXTI->EMR	= 0x00000000;
	EXTI->RTSR	= 0x00000000;
	EXTI->FTSR	= 0x00000000;
	EXTI->SWIER = 0x00000000;

	//rc_w1 cleared by writing '1' into the bit
	EXTI->PR	= 0xFFFFFFFF;

	//Disable EXTI IRQ from NVIC
	NVIC_IRQ6_EXTI0_Disable;
	NVIC_IRQ6_EXTI1_Disable;
	NVIC_IRQ6_EXTI2_Disable;
	NVIC_IRQ6_EXTI3_Disable;
	NVIC_IRQ6_EXTI4_Disable;
	NVIC_IRQ6_EXTI5_9_Disable;
	NVIC_IRQ6_EXTI10_15_Disable;

}

/**================================================================
 * @Fn			-MCAL_EXTI_GPIO_Init
 * @brief 		-Used to initialize EXTI from specific GPIO PIN and specify the Mask/Trigger condition and IRQ CallBack
 * @param [in] 	-EXTI_Config set by @ref EXTI_define, EXTI_Trigger_define, EXTI_IRQ_define
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				but LQFP48 Package has only GPIO A,B and part of C,D exported as external PINs from the MCU
 * 				Also it is mandatory to enable the RCC Clock for AFIO and corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
	Update_EXTI(EXTI_Config);
}
/**================================================================
 * @Fn			-MCAL_EXTI_GPIO_Update
 * @brief 		-Used to initialize EXTI from specific GPIO PIN and specify the Mask/Trigger condition and IRQ CallBack
 * @param [in] 	-EXTI_Config set by @ref EXTI_define, EXTI_Trigger_define, EXTI_IRQ_define
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				but LQFP48 Package has only GPIO A,B and part of C,D exported as external PINs from the MCU
 * 				Also it is mandatory to enable the RCC Clock for AFIO and corresponding GPIO
 */
void MCAL_EXTI_GPIO_Update (EXTI_PinConfig_t* EXTI_Config)
{
	Update_EXTI(EXTI_Config);
}


//**================================================================
//**======================  ISR Functions ==========================
//**================================================================

void EXTI0_IRQHandler (void)
{
	//Pending register (EXTI_PR), cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 0);
	//Call IRQ_Callback
	GP_IRQ_CallBack[0]();

}
void EXTI1_IRQHandler (void)
{
	EXTI->PR |= (1 << 1);
	//Call IRQ_Callback
	GP_IRQ_CallBack[1]();
}
void EXTI2_IRQHandler (void)
{
	EXTI->PR |= (1 << 2);
	//Call IRQ_Callback
	GP_IRQ_CallBack[2]();
}
void EXTI3_IRQHandler (void)
{
	EXTI->PR |= (1 << 3);
	//Call IRQ_Callback
	GP_IRQ_CallBack[3]();
}
void EXTI4_IRQHandler (void)
{
	EXTI->PR |= (1 << 4);
	//Call IRQ_Callback
	GP_IRQ_CallBack[4]();
}
void EXTI9_5_IRQHandler (void)
{
	//Check which Interrupt line was triggered then clear it & call IRQ_Callback
	if (EXTI->PR & 1<<5) {EXTI->PR |= (1 << 5); GP_IRQ_CallBack[5]();}
	if (EXTI->PR & 1<<6) {EXTI->PR |= (1 << 6); GP_IRQ_CallBack[6]();}
	if (EXTI->PR & 1<<7) {EXTI->PR |= (1 << 7); GP_IRQ_CallBack[7]();}
	if (EXTI->PR & 1<<8) {EXTI->PR |= (1 << 8); GP_IRQ_CallBack[8]();}
	if (EXTI->PR & 1<<9) {EXTI->PR |= (1 << 9); GP_IRQ_CallBack[9]();}
}
void EXTI15_10_IRQHandler (void)
{

}
