
U7L2S_LCD_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000394  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc6  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077c  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ea  00000000  00000000  0000196e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ab  00000000  00000000  000026f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 18 01 	call	0x230	; 0x230 <main>
  7a:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_INIT>:
int Keypad_C[] = {C0, C1, C2, C3};
	
void KEYPAD_INIT()
{	
	//input
	KEYPAD_DDR &= ~((1<<R0)|(1<<R1)|(1<<R2)|(1<<R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	//output
	KEYPAD_DDR |=  ((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT=0xFF; //PUR for i/p & high for o/p
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <KEYPAD_GET_CHAR>:
}
char KEYPAD_GET_CHAR()
{
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	int i,j;
	for (i=0;i<4;i++)
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	9d c0       	rjmp	.+314    	; 0x1dc <KEYPAD_GET_CHAR+0x148>
	{
		KEYPAD_PORT|= ((1<<Keypad_C[0])|(1<<Keypad_C[1])|(1<<Keypad_C[2])|(1<<Keypad_C[3]));
  a2:	32 b3       	in	r19, 0x12	; 18
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	8c 01       	movw	r16, r24
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <KEYPAD_GET_CHAR+0x22>
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <KEYPAD_GET_CHAR+0x1e>
  ba:	ec 01       	movw	r28, r24
  bc:	02 80       	ldd	r0, Z+2	; 0x02
  be:	02 c0       	rjmp	.+4      	; 0xc4 <KEYPAD_GET_CHAR+0x30>
  c0:	cc 0f       	add	r28, r28
  c2:	dd 1f       	adc	r29, r29
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <KEYPAD_GET_CHAR+0x2c>
  c8:	dc 01       	movw	r26, r24
  ca:	04 80       	ldd	r0, Z+4	; 0x04
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <KEYPAD_GET_CHAR+0x3e>
  ce:	aa 0f       	add	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <KEYPAD_GET_CHAR+0x3a>
  d6:	bc 01       	movw	r22, r24
  d8:	06 80       	ldd	r0, Z+6	; 0x06
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KEYPAD_GET_CHAR+0x4c>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KEYPAD_GET_CHAR+0x48>
  e4:	2c 2f       	mov	r18, r28
  e6:	20 2b       	or	r18, r16
  e8:	2a 2b       	or	r18, r26
  ea:	26 2b       	or	r18, r22
  ec:	23 2b       	or	r18, r19
  ee:	22 bb       	out	0x12, r18	; 18
		KEYPAD_PORT&=~(1<<Keypad_C[i]);
  f0:	22 b3       	in	r18, 0x12	; 18
  f2:	fa 01       	movw	r30, r20
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	00 80       	ld	r0, Z
  fe:	02 c0       	rjmp	.+4      	; 0x104 <KEYPAD_GET_CHAR+0x70>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <KEYPAD_GET_CHAR+0x6c>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	82 bb       	out	0x12, r24	; 18
		for(j=0;j<4;j++)
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	5e c0       	rjmp	.+188    	; 0x1d0 <KEYPAD_GET_CHAR+0x13c>
		{
			if(!(KEYPAD_PIN & (1 << Keypad_R[j])))
 114:	80 b3       	in	r24, 0x10	; 16
 116:	fb 01       	movw	r30, r22
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e8 59       	subi	r30, 0x98	; 152
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	20 81       	ld	r18, Z
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <KEYPAD_GET_CHAR+0x98>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <KEYPAD_GET_CHAR+0x94>
 130:	80 fd       	sbrc	r24, 0
 132:	4c c0       	rjmp	.+152    	; 0x1cc <KEYPAD_GET_CHAR+0x138>
			{
				while(!(KEYPAD_PIN & (1 << Keypad_R[j]))); //single press - wait for key release
 134:	80 b3       	in	r24, 0x10	; 16
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <KEYPAD_GET_CHAR+0xac>
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <KEYPAD_GET_CHAR+0xa8>
 144:	80 ff       	sbrs	r24, 0
 146:	f6 cf       	rjmp	.-20     	; 0x134 <KEYPAD_GET_CHAR+0xa0>
					switch(i)
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	51 05       	cpc	r21, r1
 14c:	c9 f0       	breq	.+50     	; 0x180 <KEYPAD_GET_CHAR+0xec>
 14e:	24 f4       	brge	.+8      	; 0x158 <KEYPAD_GET_CHAR+0xc4>
 150:	41 15       	cp	r20, r1
 152:	51 05       	cpc	r21, r1
 154:	41 f0       	breq	.+16     	; 0x166 <KEYPAD_GET_CHAR+0xd2>
 156:	3a c0       	rjmp	.+116    	; 0x1cc <KEYPAD_GET_CHAR+0x138>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	51 05       	cpc	r21, r1
 15c:	f1 f0       	breq	.+60     	; 0x19a <KEYPAD_GET_CHAR+0x106>
 15e:	43 30       	cpi	r20, 0x03	; 3
 160:	51 05       	cpc	r21, r1
 162:	41 f1       	breq	.+80     	; 0x1b4 <KEYPAD_GET_CHAR+0x120>
 164:	33 c0       	rjmp	.+102    	; 0x1cc <KEYPAD_GET_CHAR+0x138>
					{
						case 0:
						{
							if(j==0)
 166:	61 15       	cp	r22, r1
 168:	71 05       	cpc	r23, r1
 16a:	f1 f1       	breq	.+124    	; 0x1e8 <KEYPAD_GET_CHAR+0x154>
							return '7';
							else if (j==1)
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	71 05       	cpc	r23, r1
 170:	e9 f1       	breq	.+122    	; 0x1ec <KEYPAD_GET_CHAR+0x158>
							return '4';
							else if (j==2)
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	71 05       	cpc	r23, r1
 176:	e1 f1       	breq	.+120    	; 0x1f0 <KEYPAD_GET_CHAR+0x15c>
							return '1';
							else if (j==3)
 178:	63 30       	cpi	r22, 0x03	; 3
 17a:	71 05       	cpc	r23, r1
 17c:	39 f5       	brne	.+78     	; 0x1cc <KEYPAD_GET_CHAR+0x138>
 17e:	3a c0       	rjmp	.+116    	; 0x1f4 <KEYPAD_GET_CHAR+0x160>
							return '!';
							break;
						}
						case 1:
						{
							if(j==0)
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	c9 f1       	breq	.+114    	; 0x1f8 <KEYPAD_GET_CHAR+0x164>
							return '8';
							else if (j==1)
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	71 05       	cpc	r23, r1
 18a:	c1 f1       	breq	.+112    	; 0x1fc <KEYPAD_GET_CHAR+0x168>
							return '5';
							else if (j==2)
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	71 05       	cpc	r23, r1
 190:	b9 f1       	breq	.+110    	; 0x200 <KEYPAD_GET_CHAR+0x16c>
							return '2';
							else if (j==3)
 192:	63 30       	cpi	r22, 0x03	; 3
 194:	71 05       	cpc	r23, r1
 196:	d1 f4       	brne	.+52     	; 0x1cc <KEYPAD_GET_CHAR+0x138>
 198:	35 c0       	rjmp	.+106    	; 0x204 <KEYPAD_GET_CHAR+0x170>
							return '0';
							break;
						}
						case 2:
						{
							if(j==0)
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	a1 f1       	breq	.+104    	; 0x208 <KEYPAD_GET_CHAR+0x174>
							return '9';
							else if (j==1)
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	99 f1       	breq	.+102    	; 0x20c <KEYPAD_GET_CHAR+0x178>
							return '6';
							else if (j==2)
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	71 05       	cpc	r23, r1
 1aa:	91 f1       	breq	.+100    	; 0x210 <KEYPAD_GET_CHAR+0x17c>
							return '3';
							else if (j==3)
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	71 05       	cpc	r23, r1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <KEYPAD_GET_CHAR+0x138>
 1b2:	30 c0       	rjmp	.+96     	; 0x214 <KEYPAD_GET_CHAR+0x180>
							return '=';
							break;
						}
						case 3:
						{
							if(j==0)
 1b4:	61 15       	cp	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	79 f1       	breq	.+94     	; 0x218 <KEYPAD_GET_CHAR+0x184>
							return '/';
							else if (j==1)
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	71 05       	cpc	r23, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <KEYPAD_GET_CHAR+0x188>
							return '*';
							else if (j==2)
 1c0:	62 30       	cpi	r22, 0x02	; 2
 1c2:	71 05       	cpc	r23, r1
 1c4:	69 f1       	breq	.+90     	; 0x220 <KEYPAD_GET_CHAR+0x18c>
							return '-';
							else if (j==3)
 1c6:	63 30       	cpi	r22, 0x03	; 3
 1c8:	71 05       	cpc	r23, r1
 1ca:	61 f1       	breq	.+88     	; 0x224 <KEYPAD_GET_CHAR+0x190>
	int i,j;
	for (i=0;i<4;i++)
	{
		KEYPAD_PORT|= ((1<<Keypad_C[0])|(1<<Keypad_C[1])|(1<<Keypad_C[2])|(1<<Keypad_C[3]));
		KEYPAD_PORT&=~(1<<Keypad_C[i]);
		for(j=0;j<4;j++)
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	64 30       	cpi	r22, 0x04	; 4
 1d2:	71 05       	cpc	r23, r1
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <KEYPAD_GET_CHAR+0x144>
 1d6:	9e cf       	rjmp	.-196    	; 0x114 <KEYPAD_GET_CHAR+0x80>
	KEYPAD_PORT=0xFF; //PUR for i/p & high for o/p
}
char KEYPAD_GET_CHAR()
{
	int i,j;
	for (i=0;i<4;i++)
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	44 30       	cpi	r20, 0x04	; 4
 1de:	51 05       	cpc	r21, r1
 1e0:	0c f4       	brge	.+2      	; 0x1e4 <KEYPAD_GET_CHAR+0x150>
 1e2:	5f cf       	rjmp	.-322    	; 0xa2 <KEYPAD_GET_CHAR+0xe>
					}
				
			}
		}
	}
	return 'N';
 1e4:	8e e4       	ldi	r24, 0x4E	; 78
 1e6:	1f c0       	rjmp	.+62     	; 0x226 <KEYPAD_GET_CHAR+0x192>
					switch(i)
					{
						case 0:
						{
							if(j==0)
							return '7';
 1e8:	87 e3       	ldi	r24, 0x37	; 55
 1ea:	1d c0       	rjmp	.+58     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==1)
							return '4';
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==2)
							return '1';
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==3)
							return '!';
 1f4:	81 e2       	ldi	r24, 0x21	; 33
 1f6:	17 c0       	rjmp	.+46     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							break;
						}
						case 1:
						{
							if(j==0)
							return '8';
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==1)
							return '5';
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==2)
							return '2';
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	11 c0       	rjmp	.+34     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==3)
							return '0';
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0f c0       	rjmp	.+30     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							break;
						}
						case 2:
						{
							if(j==0)
							return '9';
 208:	89 e3       	ldi	r24, 0x39	; 57
 20a:	0d c0       	rjmp	.+26     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==1)
							return '6';
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	0b c0       	rjmp	.+22     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==2)
							return '3';
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	09 c0       	rjmp	.+18     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==3)
							return '=';
 214:	8d e3       	ldi	r24, 0x3D	; 61
 216:	07 c0       	rjmp	.+14     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							break;
						}
						case 3:
						{
							if(j==0)
							return '/';
 218:	8f e2       	ldi	r24, 0x2F	; 47
 21a:	05 c0       	rjmp	.+10     	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==1)
							return '*';
 21c:	8a e2       	ldi	r24, 0x2A	; 42
 21e:	03 c0       	rjmp	.+6      	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==2)
							return '-';
 220:	8d e2       	ldi	r24, 0x2D	; 45
 222:	01 c0       	rjmp	.+2      	; 0x226 <KEYPAD_GET_CHAR+0x192>
							else if (j==3)
							return '+';
 224:	8b e2       	ldi	r24, 0x2B	; 43
				
			}
		}
	}
	return 'N';
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <main>:
#include "LCD_Driver/LCD.h"
#include "Keypad_Driver/Keypad.h"

int main(void)
{
   LCD_INIT();
 230:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	83 ec       	ldi	r24, 0xC3	; 195
 236:	99 e0       	ldi	r25, 0x09	; 9
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x8>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0xe>
 23e:	00 00       	nop
   _delay_ms(10);
   KEYPAD_INIT();
 240:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_INIT>
  // LCD_CUSTOM_CHAR();
   char pressed_key;
    while (1) 
    {
		pressed_key = KEYPAD_GET_CHAR();
 244:	0e 94 4a 00 	call	0x94	; 0x94 <KEYPAD_GET_CHAR>
		switch(pressed_key)
 248:	81 32       	cpi	r24, 0x21	; 33
 24a:	19 f0       	breq	.+6      	; 0x252 <main+0x22>
 24c:	8e 34       	cpi	r24, 0x4E	; 78
 24e:	d1 f3       	breq	.-12     	; 0x244 <main+0x14>
 250:	03 c0       	rjmp	.+6      	; 0x258 <main+0x28>
		{
			case '!':
			{
				LCD_CLEAR();
 252:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_CLEAR>
				break;
 256:	f6 cf       	rjmp	.-20     	; 0x244 <main+0x14>
			{
				break;
			}
			default:
			{
				LCD_WRITE_CHAR(pressed_key);
 258:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_WRITE_CHAR>
				break;
 25c:	f3 cf       	rjmp	.-26     	; 0x244 <main+0x14>

0000025e <LCD_KICK>:
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
	}
	
}
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	87 7f       	andi	r24, 0xF7	; 247
 262:	88 bb       	out	0x18, r24	; 24
 264:	8b e4       	ldi	r24, 0x4B	; 75
 266:	9d e1       	ldi	r25, 0x1D	; 29
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_KICK+0xa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_KICK+0x10>
 26e:	00 00       	nop
 270:	88 b3       	in	r24, 0x18	; 24
 272:	88 60       	ori	r24, 0x08	; 8
 274:	88 bb       	out	0x18, r24	; 24
 276:	08 95       	ret

00000278 <LCD_BUSY>:
 278:	8a b3       	in	r24, 0x1a	; 26
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	8a bb       	out	0x1a, r24	; 26
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	84 60       	ori	r24, 0x04	; 4
 282:	88 bb       	out	0x18, r24	; 24
 284:	88 b3       	in	r24, 0x18	; 24
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	88 bb       	out	0x18, r24	; 24
 28a:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_KICK>
 28e:	8a b3       	in	r24, 0x1a	; 26
 290:	80 6f       	ori	r24, 0xF0	; 240
 292:	8a bb       	out	0x1a, r24	; 26
 294:	88 b3       	in	r24, 0x18	; 24
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	88 bb       	out	0x18, r24	; 24
 29a:	08 95       	ret

0000029c <LCD_WRITE_COMMAND>:
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
 2a0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_BUSY>
 2a4:	8b b3       	in	r24, 0x1b	; 27
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	9c 2f       	mov	r25, r28
 2aa:	90 7f       	andi	r25, 0xF0	; 240
 2ac:	89 2b       	or	r24, r25
 2ae:	8b bb       	out	0x1b, r24	; 27
 2b0:	88 b3       	in	r24, 0x18	; 24
 2b2:	89 7f       	andi	r24, 0xF9	; 249
 2b4:	88 bb       	out	0x18, r24	; 24
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_WRITE_COMMAND+0x1e>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_WRITE_COMMAND+0x24>
 2c0:	00 00       	nop
 2c2:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_KICK>
 2c6:	2b b3       	in	r18, 0x1b	; 27
 2c8:	30 e1       	ldi	r19, 0x10	; 16
 2ca:	c3 9f       	mul	r28, r19
 2cc:	c0 01       	movw	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	92 2f       	mov	r25, r18
 2d2:	9f 70       	andi	r25, 0x0F	; 15
 2d4:	89 2b       	or	r24, r25
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	89 7f       	andi	r24, 0xF9	; 249
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	89 ef       	ldi	r24, 0xF9	; 249
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_WRITE_COMMAND+0x46>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_WRITE_COMMAND+0x4c>
 2e8:	00 00       	nop
 2ea:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_KICK>
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <LCD_WRITE_CHAR>:
		LCD_KICK();
	#endif
}

void LCD_WRITE_CHAR (unsigned char data)
{
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
		LCD_CTRL_PORT &=~(1<<RW_SWITCH);
		LCD_CTRL_PORT|=(1<<RS_SWITCH);
		LCD_KICK();
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_Data_PORT = (LCD_Data_PORT & 0x0F) | (data & 0xF0);
 2f6:	8b b3       	in	r24, 0x1b	; 27
 2f8:	8f 70       	andi	r24, 0x0F	; 15
 2fa:	9c 2f       	mov	r25, r28
 2fc:	90 7f       	andi	r25, 0xF0	; 240
 2fe:	89 2b       	or	r24, r25
 300:	8b bb       	out	0x1b, r24	; 27
		//RS=1 data mode & RW=0 to write
		LCD_CTRL_PORT|=(1<<RS_SWITCH);
 302:	88 b3       	in	r24, 0x18	; 24
 304:	82 60       	ori	r24, 0x02	; 2
 306:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL_PORT &=~(1<<RW_SWITCH);
 308:	88 b3       	in	r24, 0x18	; 24
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 30e:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_KICK>
		LCD_Data_PORT = (LCD_Data_PORT & 0x0F) | (data << 4);
 312:	2b b3       	in	r18, 0x1b	; 27
 314:	30 e1       	ldi	r19, 0x10	; 16
 316:	c3 9f       	mul	r28, r19
 318:	c0 01       	movw	r24, r0
 31a:	11 24       	eor	r1, r1
 31c:	92 2f       	mov	r25, r18
 31e:	9f 70       	andi	r25, 0x0F	; 15
 320:	89 2b       	or	r24, r25
 322:	8b bb       	out	0x1b, r24	; 27
		//RS=1 data mode & RW=0 write
		LCD_CTRL_PORT|=(1<<RS_SWITCH);
 324:	88 b3       	in	r24, 0x18	; 24
 326:	82 60       	ori	r24, 0x02	; 2
 328:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL_PORT &=~(1<<RW_SWITCH);
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	8b 7f       	andi	r24, 0xFB	; 251
 32e:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 330:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_KICK>
	#endif
}
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <LCD_CLEAR>:
		}
	}
}
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WRITE_COMMAND>
 33e:	08 95       	ret

00000340 <LCD_INIT>:
 340:	87 e8       	ldi	r24, 0x87	; 135
 342:	93 e1       	ldi	r25, 0x13	; 19
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_INIT+0x4>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_INIT+0xa>
 34a:	00 00       	nop

}
void LCD_INIT(void)
{
	_delay_ms(20);
	LCD_CTRL_DDR |= ((1<< RS_SWITCH) | (1<< RW_SWITCH) | (1<< ENABLE_SWITCH)); //output
 34c:	87 b3       	in	r24, 0x17	; 23
 34e:	8e 60       	ori	r24, 0x0E	; 14
 350:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT &=~ ((1<< RS_SWITCH) | (1<< RW_SWITCH) | (1<< ENABLE_SWITCH)); // off only turn on when needed
 352:	88 b3       	in	r24, 0x18	; 24
 354:	81 7f       	andi	r24, 0xF1	; 241
 356:	88 bb       	out	0x18, r24	; 24
	LCD_Data_DDR = 0xFF; //output 
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	8a bb       	out	0x1a, r24	; 26
 35c:	85 ea       	ldi	r24, 0xA5	; 165
 35e:	9e e0       	ldi	r25, 0x0E	; 14
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <LCD_INIT+0x20>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_INIT+0x26>
 366:	00 00       	nop
	
	_delay_ms(15);
	LCD_BUSY();
 368:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_BUSY>
	LCD_CLEAR();
 36c:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_CLEAR>
	
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_INIT_4BIT_Mode); //init 4-bit mode
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES); // config for 2 lines for 4-bit mode
 376:	88 e2       	ldi	r24, 0x28	; 40
 378:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WRITE_COMMAND>
	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 37c:	86 e0       	ldi	r24, 0x06	; 6
 37e:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 382:	80 e8       	ldi	r24, 0x80	; 128
 384:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 388:	8f e0       	ldi	r24, 0x0F	; 15
 38a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WRITE_COMMAND>
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
