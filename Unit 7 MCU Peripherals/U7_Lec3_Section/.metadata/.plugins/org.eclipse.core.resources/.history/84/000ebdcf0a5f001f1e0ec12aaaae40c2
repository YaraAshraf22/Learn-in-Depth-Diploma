/*
 * LCD.c
 *
 * Created: 8/11/2024 2:38:23 AM
 *  Author: Yara Ashraf
 */ 

#include "LCD.h"

GPIO_PinConfig_t PinCnfg;

void wait_ms (int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
		for(j=0;j<255;j++);
}
void LCD_Config_Data_4Bit_MODE_INPUT_FLO()
{
	PinCnfg.GPIO_PinNumber = GPIO_PIN_0;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_2;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_3;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

}
void LCD_Config_Data_8Bit_MODE_INPUT_FLO()
{
	PinCnfg.GPIO_PinNumber = GPIO_PIN_0;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_2;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_3;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_4;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_5;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_6;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_7;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
}
void LCD_Config_Data_4Bit_MODE_OUTPUT_PP()
{
	PinCnfg.GPIO_PinNumber = GPIO_PIN_0;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_2;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_3;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
}
void LCD_Config_Data_8Bit_MODE_OUTPUT_PP()
{
	PinCnfg.GPIO_PinNumber = GPIO_PIN_0;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_2;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_3;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_4;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_5;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_6;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_7;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
}

void LCD_KICK(void)
{
	//To reset EN
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, ENABLE_SWITCH, GPIO_PIN_RESET);
	wait_ms(30); // using Enable Cycle time in Bus timing characteristics in data sheet
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, ENABLE_SWITCH, GPIO_PIN_SET);
}
void LCD_GOTO_XY(int line, int position)
{
	if(line==1)
	{
		if(position<16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
		}
	}
	if(line==2)
	{
		if(position<16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
	}

}
void LCD_BUSY(void)
{
	//Set data port as input
	//LCD_Data_DDR &= ~(0xFF << DATA_SHIFT); // D4-D7 if 4-bit mode on LCD
#ifdef EIGHT_BIT_MODE
	LCD_Config_Data_8Bit_MODE_INPUT_FLO();
#endif
#ifdef FOUR_BIT_MODE
	LCD_Config_Data_4Bit_MODE_INPUT_FLO();
#endif

	//D7 as busy flag
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_SET);		//LCD in Read mode - busy
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_RESET);	//LCD in Command mode

	LCD_KICK();
	//set Data port as output
	//LCD_Data_DDR |= (0xFF << DATA_SHIFT);
#ifdef EIGHT_BIT_MODE
	LCD_Config_Data_8Bit_MODE_OUTPUT_PP();
#endif
#ifdef FOUR_BIT_MODE
	LCD_Config_Data_4Bit_MODE_OUTPUT_PP();
#endif
	//RW=0 write to LCD Inst Register (RS=0)
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET);	//turn off read mode

}
void LCD_INIT(void)
{
	wait_ms(20);

	//Set RS,RW,EN as OUTPUT
	PinCnfg.GPIO_PinNumber = RS_SWITCH;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	MCAL_GPIO_Init(LCD_CTRL_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = RW_SWITCH;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	MCAL_GPIO_Init(LCD_CTRL_GPIO, &PinCnfg);

	PinCnfg.GPIO_PinNumber = ENABLE_SWITCH;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	MCAL_GPIO_Init(LCD_CTRL_GPIO, &PinCnfg);

	//	Set Data Pins as OUTPUT
#ifdef EIGHT_BIT_MODE
	LCD_Config_Data_8Bit_MODE_OUTPUT_PP();
#endif
#ifdef FOUR_BIT_MODE
	LCD_Config_Data_4Bit_MODE_OUTPUT_PP();
#endif

	wait_ms(15);
	LCD_BUSY();
	LCD_CLEAR();

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
#endif
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(LCD_INIT_4BIT_Mode); //init 4-bit mode
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES); // config for 2 lines for 4-bit mode
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_WRITE_COMMAND (unsigned char command)
{
	LCD_BUSY();
#ifdef EIGHT_BIT_MODE
	//write command to port
	MCAL_GPIO_WritePort(LCD_Data_GPIO, command);
	//Write to Instruction Register
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET);
	LCD_KICK();
#endif
#ifdef FOUR_BIT_MODE
	LCD_Data_PORT = (LCD_Data_PORT & 0x0F) | (command & 0xF0);
	LCD_CTRL_PORT &=~((1<<RS_SWITCH)|(1<<RW_SWITCH));
	wait_ms(1);
	LCD_KICK();
	LCD_Data_PORT = (LCD_Data_PORT & 0x0F) | (command << 4);
	LCD_CTRL_PORT &=~((1<<RS_SWITCH)|(1<<RW_SWITCH));
	wait_ms(1);
	LCD_KICK();
#endif
}

void LCD_WRITE_CHAR (unsigned char data)
{
	//LCD_BUSY();
#ifdef EIGHT_BIT_MODE
	LCD_Data_PORT = data;
	//Writ to Data to LCD
	LCD_CTRL_PORT &=~(1<<RW_SWITCH);
	LCD_CTRL_PORT|=(1<<RS_SWITCH);
	LCD_KICK();
#endif
#ifdef FOUR_BIT_MODE
	LCD_Data_PORT = (LCD_Data_PORT & 0x0F) | (data & 0xF0);
	//RS=1 data mode & RW=0 to write
	LCD_CTRL_PORT|=(1<<RS_SWITCH);
	LCD_CTRL_PORT &=~(1<<RW_SWITCH);
	LCD_KICK();
	LCD_Data_PORT = (LCD_Data_PORT & 0x0F) | (data << 4);
	//RS=1 data mode & RW=0 write
	LCD_CTRL_PORT|=(1<<RS_SWITCH);
	LCD_CTRL_PORT &=~(1<<RW_SWITCH);
	LCD_KICK();
#endif
}

void LCD_WRITE_STRING (char* data)
{
	int count =0;
	while(*data > 0)
	{
		count++;
		LCD_WRITE_CHAR(*data++);
		if(count == 16)
		{
			LCD_GOTO_XY(2,0);
		}
		else if(count == 32)
		{
			LCD_CLEAR();
			LCD_GOTO_XY(1,0);
			count=0;
		}
	}
}
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_CUSTOM_CHAR (void)
{
	LCD_WRITE_COMMAND(64); //write
	//Store new custom char in CGRAM
	LCD_WRITE_CHAR(0);
	LCD_WRITE_CHAR(14);
	LCD_WRITE_CHAR(17);
	LCD_WRITE_CHAR(2);
	LCD_WRITE_CHAR(4);
	LCD_WRITE_CHAR(4);
	LCD_WRITE_CHAR(0);
	LCD_WRITE_CHAR(4);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	//Print stored char
	LCD_WRITE_CHAR(0);
	wait_ms(10);
}
