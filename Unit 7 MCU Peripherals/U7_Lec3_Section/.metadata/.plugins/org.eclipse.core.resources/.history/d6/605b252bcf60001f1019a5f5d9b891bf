/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "STM32F103x6.h"
#include "STM32_F103C6_GPIO_Driver.h"

#include "LCD.h"
#include "Keypad.h"

#define ZERO	0x01
#define ONE		0x79
#define TWO		0x24
#define THREE	0x30
#define FOUR	0x19
#define FIVE	0x12
#define SIX		0x02
#define SEVEN	0x78
#define EIGHT	0x00
#define NINE	0x10

void clock_init()
{
	//Enable RCC CLK to GPIOA, bit2
	RCC_GPIOA_CLK_EN();
	//Enable RCC CLK to GPIOB, bit3
	RCC_GPIOB_CLK_EN();
}
/*
void GPIO_init()
{

	GPIO_PinConfig_t PinCnfg;

	//PA1 i/p high Z mode, Floating input (reset state)
	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCnfg);

	//PA13 i/p high Z mode, Floating input (reset state)
	PinCnfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCnfg);

	//PB1 o/p  push pull mode
	//CNF 00: General purpose output push-pull
	//MODE 01: Output mode, max speed 10 MHz
	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	//PB13 o/p  push pull mode
	//CNF 00: General purpose output push-pull
	//MODE 01: Output mode, max speed 10 MHz
	PinCnfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);


}


int main (void)
{
	clock_init();
	GPIO_init();

	while(1)
	{
		//PA1 >> conn to ext PUR so by default value = 1 (VCC) , PB > 0 (GND)
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) //Read IDR pin1
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1); //toggle PB1
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0); //Single Press
		}
		//PA13 >> conn to ext PUD so by default value = 0 (GND),  PB > 1 (VCC)
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1) //Read IDR pin13, Multi-press
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
		}
		wait_ms(1);
	}
	return 0;
}
 */

void SEG_GPIO_INIT()
{
	GPIO_PinConfig_t PinCnfg;
	PinCnfg.GPIO_PinNumber = GPIO_PIN_9;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_10;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_11;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_12;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_14;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

	PinCnfg.GPIO_PinNumber = GPIO_PIN_15;
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCnfg);

}
int main (void)
{
	clock_init();
	LCD_INIT();
	SEG_GPIO_INIT();
	KEYPAD_INIT();

	char pressed_key;

	LCD_WRITE_CHAR('R');
	wait_ms(1000);
	LCD_CLEAR();
	LCD_WRITE_CHAR('D');
	wait_ms(1000);
	LCD_CLEAR();
	LCD_WRITE_CHAR('Y');

	wait_ms(1000);
	LCD_CLEAR();

	uint8_t seg[] = {0x40, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};
	uint8_t LCD[] = {'0','1','2','3','4','5','6','7','8','9'};
	for (uint8_t i=0; i<10; i++)
	{
		MCAL_GPIO_WritePort(GPIOB, seg[i]<<9);
		LCD_WRITE_CHAR(LCD[i]);
		wait_ms(1000);

	}
	//LCD_CLEAR();
	wait_ms(10);

	LCD_WRITE_STRING("Keypad Ready");
	wait_ms(1000);
	LCD_CLEAR();
	while (1)
	{
		pressed_key = KEYPAD_GET_CHAR();
		switch(pressed_key)
		{
		case '!':
		{
			LCD_CLEAR();
			break;
		}
		case 'N':
		{
			break;
		}
		default:
		{
			LCD_WRITE_CHAR(pressed_key);
			break;
		}
		}
	}
	return 0;
}
