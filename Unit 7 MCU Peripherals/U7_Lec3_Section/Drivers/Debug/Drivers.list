
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd4  08000cd4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd4  08000cd4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd4  08000cd4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd8  08000cd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000cfc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000cfc  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030a0  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007f7  00000000  00000000  000230e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007a0  00000000  00000000  000238e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000168  00000000  00000000  00024080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  000241e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fbc  00000000  00000000  00024308  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b75  00000000  00000000  000262c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007bcd  00000000  00000000  00027e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002fa06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000042c  00000000  00000000  0002fa84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c94 	.word	0x08000c94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000c94 	.word	0x08000c94

08000170 <KEYPAD_INIT>:
int Keypad_C[] = {C0, C1, C2, C3};

GPIO_PinConfig_t PinCnfg;

void KEYPAD_INIT()
{	
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	// Configure rows ad column pins to output
	PinCnfg.GPIO_PinNumber = R0;
 8000174:	4b37      	ldr	r3, [pc, #220]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	4b36      	ldr	r3, [pc, #216]	; (8000254 <KEYPAD_INIT+0xe4>)
 800017c:	2204      	movs	r2, #4
 800017e:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000180:	4b34      	ldr	r3, [pc, #208]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 8000186:	4933      	ldr	r1, [pc, #204]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000188:	4833      	ldr	r0, [pc, #204]	; (8000258 <KEYPAD_INIT+0xe8>)
 800018a:	f000 fba7 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = R1;
 800018e:	4b31      	ldr	r3, [pc, #196]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000190:	2202      	movs	r2, #2
 8000192:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000196:	2204      	movs	r2, #4
 8000198:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800019a:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <KEYPAD_INIT+0xe4>)
 800019c:	2201      	movs	r2, #1
 800019e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 80001a0:	492c      	ldr	r1, [pc, #176]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001a2:	482d      	ldr	r0, [pc, #180]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001a4:	f000 fb9a 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = R2;
 80001a8:	4b2a      	ldr	r3, [pc, #168]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ae:	4b29      	ldr	r3, [pc, #164]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001b0:	2204      	movs	r2, #4
 80001b2:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80001b4:	4b27      	ldr	r3, [pc, #156]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001bc:	4826      	ldr	r0, [pc, #152]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001be:	f000 fb8d 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = R3;
 80001c2:	4b24      	ldr	r3, [pc, #144]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001c4:	2210      	movs	r2, #16
 80001c6:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001ca:	2204      	movs	r2, #4
 80001cc:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 80001d4:	491f      	ldr	r1, [pc, #124]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001d8:	f000 fb80 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = C0;
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001de:	2220      	movs	r2, #32
 80001e0:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001e4:	2204      	movs	r2, #4
 80001e6:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 80001ee:	4919      	ldr	r1, [pc, #100]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001f0:	4819      	ldr	r0, [pc, #100]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001f2:	f000 fb73 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = C1;
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001f8:	2240      	movs	r2, #64	; 0x40
 80001fa:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <KEYPAD_INIT+0xe4>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 8000208:	4912      	ldr	r1, [pc, #72]	; (8000254 <KEYPAD_INIT+0xe4>)
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <KEYPAD_INIT+0xe8>)
 800020c:	f000 fb66 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = C2;
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000218:	2204      	movs	r2, #4
 800021a:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <KEYPAD_INIT+0xe4>)
 800021e:	2201      	movs	r2, #1
 8000220:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <KEYPAD_INIT+0xe8>)
 8000226:	f000 fb59 	bl	80008dc <MCAL_GPIO_Init>


	PinCnfg.GPIO_PinNumber = C3;
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <KEYPAD_INIT+0xe4>)
 800022c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000230:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <KEYPAD_INIT+0xe4>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_GPIO, &PinCnfg);
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <KEYPAD_INIT+0xe4>)
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <KEYPAD_INIT+0xe8>)
 8000242:	f000 fb4b 	bl	80008dc <MCAL_GPIO_Init>

	//	KEYPAD_PORT=0xFF; //PUR for i/p & high for o/p
	MCAL_GPIO_WritePort(KEYPAD_GPIO, 0xFF);
 8000246:	21ff      	movs	r1, #255	; 0xff
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <KEYPAD_INIT+0xe8>)
 800024a:	f000 fbf4 	bl	8000a36 <MCAL_GPIO_WritePort>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000003c 	.word	0x2000003c
 8000258:	40010c00 	.word	0x40010c00

0800025c <KEYPAD_GET_CHAR>:
char KEYPAD_GET_CHAR()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	int i,j;
	for (i=0;i<4;i++)
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e0b4      	b.n	80003d2 <KEYPAD_GET_CHAR+0x176>
	{
		MCAL_GPIO_WritePin(KEYPAD_GPIO, Keypad_C[0], GPIO_PIN_SET);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <KEYPAD_GET_CHAR+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	485d      	ldr	r0, [pc, #372]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 8000274:	f000 fbc8 	bl	8000a08 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_GPIO, Keypad_C[1], GPIO_PIN_SET);
 8000278:	4b5a      	ldr	r3, [pc, #360]	; (80003e4 <KEYPAD_GET_CHAR+0x188>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 8000284:	f000 fbc0 	bl	8000a08 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_GPIO, Keypad_C[2], GPIO_PIN_SET);
 8000288:	4b56      	ldr	r3, [pc, #344]	; (80003e4 <KEYPAD_GET_CHAR+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	4855      	ldr	r0, [pc, #340]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 8000294:	f000 fbb8 	bl	8000a08 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_GPIO, Keypad_C[3], GPIO_PIN_SET);
 8000298:	4b52      	ldr	r3, [pc, #328]	; (80003e4 <KEYPAD_GET_CHAR+0x188>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4851      	ldr	r0, [pc, #324]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 80002a4:	f000 fbb0 	bl	8000a08 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_GPIO, Keypad_C[i], GPIO_PIN_RESET);
 80002a8:	4a4e      	ldr	r2, [pc, #312]	; (80003e4 <KEYPAD_GET_CHAR+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	484c      	ldr	r0, [pc, #304]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 80002b8:	f000 fba6 	bl	8000a08 <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e080      	b.n	80003c4 <KEYPAD_GET_CHAR+0x168>
		{
			if(!(MCAL_GPIO_ReadPin(KEYPAD_GPIO, Keypad_R[j])))
 80002c2:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <KEYPAD_GET_CHAR+0x190>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	4846      	ldr	r0, [pc, #280]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 80002d0:	f000 fb83 	bl	80009da <MCAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d171      	bne.n	80003be <KEYPAD_GET_CHAR+0x162>
			{
				while(!(MCAL_GPIO_ReadPin(KEYPAD_GPIO, Keypad_R[j]))); //single press - wait for key release
 80002da:	bf00      	nop
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <KEYPAD_GET_CHAR+0x190>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	483f      	ldr	r0, [pc, #252]	; (80003e8 <KEYPAD_GET_CHAR+0x18c>)
 80002ea:	f000 fb76 	bl	80009da <MCAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f3      	beq.n	80002dc <KEYPAD_GET_CHAR+0x80>
				switch(i)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d861      	bhi.n	80003be <KEYPAD_GET_CHAR+0x162>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <KEYPAD_GET_CHAR+0xa4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000339 	.word	0x08000339
 8000308:	08000361 	.word	0x08000361
 800030c:	08000389 	.word	0x08000389
				{
				case 0:
				{
					if(j==0)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <KEYPAD_GET_CHAR+0xbe>
						return '7';
 8000316:	2337      	movs	r3, #55	; 0x37
 8000318:	e060      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==1)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <KEYPAD_GET_CHAR+0xc8>
						return '4';
 8000320:	2334      	movs	r3, #52	; 0x34
 8000322:	e05b      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==2)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d101      	bne.n	800032e <KEYPAD_GET_CHAR+0xd2>
						return '1';
 800032a:	2331      	movs	r3, #49	; 0x31
 800032c:	e056      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==3)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d13d      	bne.n	80003b0 <KEYPAD_GET_CHAR+0x154>
						return '!';
 8000334:	2321      	movs	r3, #33	; 0x21
 8000336:	e051      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					break;
				}
				case 1:
				{
					if(j==0)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <KEYPAD_GET_CHAR+0xe6>
						return '8';
 800033e:	2338      	movs	r3, #56	; 0x38
 8000340:	e04c      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==1)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <KEYPAD_GET_CHAR+0xf0>
						return '5';
 8000348:	2335      	movs	r3, #53	; 0x35
 800034a:	e047      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==2)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <KEYPAD_GET_CHAR+0xfa>
						return '2';
 8000352:	2332      	movs	r3, #50	; 0x32
 8000354:	e042      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==3)
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d12b      	bne.n	80003b4 <KEYPAD_GET_CHAR+0x158>
						return '0';
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	e03d      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					break;
				}
				case 2:
				{
					if(j==0)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <KEYPAD_GET_CHAR+0x10e>
						return '9';
 8000366:	2339      	movs	r3, #57	; 0x39
 8000368:	e038      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==1)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <KEYPAD_GET_CHAR+0x118>
						return '6';
 8000370:	2336      	movs	r3, #54	; 0x36
 8000372:	e033      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==2)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <KEYPAD_GET_CHAR+0x122>
						return '3';
 800037a:	2333      	movs	r3, #51	; 0x33
 800037c:	e02e      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==3)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d119      	bne.n	80003b8 <KEYPAD_GET_CHAR+0x15c>
						return '=';
 8000384:	233d      	movs	r3, #61	; 0x3d
 8000386:	e029      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					break;
				}
				case 3:
				{
					if(j==0)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <KEYPAD_GET_CHAR+0x136>
						return '/';
 800038e:	232f      	movs	r3, #47	; 0x2f
 8000390:	e024      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==1)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <KEYPAD_GET_CHAR+0x140>
						return '*';
 8000398:	232a      	movs	r3, #42	; 0x2a
 800039a:	e01f      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==2)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <KEYPAD_GET_CHAR+0x14a>
						return '-';
 80003a2:	232d      	movs	r3, #45	; 0x2d
 80003a4:	e01a      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					else if (j==3)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d107      	bne.n	80003bc <KEYPAD_GET_CHAR+0x160>
						return '+';
 80003ac:	232b      	movs	r3, #43	; 0x2b
 80003ae:	e015      	b.n	80003dc <KEYPAD_GET_CHAR+0x180>
					break;
 80003b0:	bf00      	nop
 80003b2:	e004      	b.n	80003be <KEYPAD_GET_CHAR+0x162>
					break;
 80003b4:	bf00      	nop
 80003b6:	e002      	b.n	80003be <KEYPAD_GET_CHAR+0x162>
					break;
 80003b8:	bf00      	nop
 80003ba:	e000      	b.n	80003be <KEYPAD_GET_CHAR+0x162>
					break;
 80003bc:	bf00      	nop
		for(j=0;j<4;j++)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f77f af7b 	ble.w	80002c2 <KEYPAD_GET_CHAR+0x66>
	for (i=0;i<4;i++)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	f77f af47 	ble.w	8000268 <KEYPAD_GET_CHAR+0xc>
				}

			}
		}
	}
	return 'N';
 80003da:	234e      	movs	r3, #78	; 0x4e
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000010 	.word	0x20000010
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	20000000 	.word	0x20000000

080003f0 <LCD_Config_Data_8Bit_MODE_INPUT_FLO>:
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);

}
void LCD_Config_Data_8Bit_MODE_INPUT_FLO()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	PinCnfg.GPIO_PinNumber = GPIO_PIN_0;
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000400:	4925      	ldr	r1, [pc, #148]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000402:	4826      	ldr	r0, [pc, #152]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 8000404:	f000 fa6a 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800040a:	2202      	movs	r2, #2
 800040c:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000410:	2201      	movs	r2, #1
 8000412:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000414:	4920      	ldr	r1, [pc, #128]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000416:	4821      	ldr	r0, [pc, #132]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 8000418:	f000 fa60 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_2;
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800041e:	2204      	movs	r2, #4
 8000420:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000424:	2201      	movs	r2, #1
 8000426:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000428:	491b      	ldr	r1, [pc, #108]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800042a:	481c      	ldr	r0, [pc, #112]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 800042c:	f000 fa56 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_3;
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000432:	2208      	movs	r2, #8
 8000434:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000438:	2201      	movs	r2, #1
 800043a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 800043c:	4916      	ldr	r1, [pc, #88]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800043e:	4817      	ldr	r0, [pc, #92]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 8000440:	f000 fa4c 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_4;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000446:	2210      	movs	r2, #16
 8000448:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800044c:	2201      	movs	r2, #1
 800044e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000450:	4911      	ldr	r1, [pc, #68]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000452:	4812      	ldr	r0, [pc, #72]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 8000454:	f000 fa42 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_5;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800045a:	2220      	movs	r2, #32
 800045c:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000460:	2201      	movs	r2, #1
 8000462:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000464:	490c      	ldr	r1, [pc, #48]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000466:	480d      	ldr	r0, [pc, #52]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 8000468:	f000 fa38 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_6;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800046e:	2240      	movs	r2, #64	; 0x40
 8000470:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000474:	2201      	movs	r2, #1
 8000476:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000478:	4907      	ldr	r1, [pc, #28]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800047a:	4808      	ldr	r0, [pc, #32]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 800047c:	f000 fa2e 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_7;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 8000488:	2201      	movs	r2, #1
 800048a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 800048c:	4902      	ldr	r1, [pc, #8]	; (8000498 <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xa8>)
 800048e:	4803      	ldr	r0, [pc, #12]	; (800049c <LCD_Config_Data_8Bit_MODE_INPUT_FLO+0xac>)
 8000490:	f000 fa24 	bl	80008dc <MCAL_GPIO_Init>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000003c 	.word	0x2000003c
 800049c:	40010800 	.word	0x40010800

080004a0 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP>:
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
}
void LCD_Config_Data_8Bit_MODE_OUTPUT_PP()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	PinCnfg.GPIO_PinNumber = GPIO_PIN_0;
 80004a4:	4b34      	ldr	r3, [pc, #208]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004aa:	4b33      	ldr	r3, [pc, #204]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80004b0:	4b31      	ldr	r3, [pc, #196]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 80004b6:	4930      	ldr	r1, [pc, #192]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004b8:	4830      	ldr	r0, [pc, #192]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 80004ba:	f000 fa0f 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_1;
 80004be:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004c4:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004c6:	2204      	movs	r2, #4
 80004c8:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 80004d0:	4929      	ldr	r1, [pc, #164]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004d2:	482a      	ldr	r0, [pc, #168]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 80004d4:	f000 fa02 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_2;
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004da:	2204      	movs	r2, #4
 80004dc:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 80004ea:	4923      	ldr	r1, [pc, #140]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 80004ee:	f000 f9f5 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_3;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004f4:	2208      	movs	r2, #8
 80004f6:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000500:	2201      	movs	r2, #1
 8000502:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000504:	491c      	ldr	r1, [pc, #112]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000506:	481d      	ldr	r0, [pc, #116]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 8000508:	f000 f9e8 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_4;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800050e:	2210      	movs	r2, #16
 8000510:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000514:	2204      	movs	r2, #4
 8000516:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800051a:	2201      	movs	r2, #1
 800051c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 800051e:	4916      	ldr	r1, [pc, #88]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000520:	4816      	ldr	r0, [pc, #88]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 8000522:	f000 f9db 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_5;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000528:	2220      	movs	r2, #32
 800052a:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800052e:	2204      	movs	r2, #4
 8000530:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000534:	2201      	movs	r2, #1
 8000536:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000538:	490f      	ldr	r1, [pc, #60]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 800053c:	f000 f9ce 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_6;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000542:	2240      	movs	r2, #64	; 0x40
 8000544:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000548:	2204      	movs	r2, #4
 800054a:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800054e:	2201      	movs	r2, #1
 8000550:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 8000552:	4909      	ldr	r1, [pc, #36]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 8000556:	f000 f9c1 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_7;
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000562:	2204      	movs	r2, #4
 8000564:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 8000568:	2201      	movs	r2, #1
 800056a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Data_GPIO, &PinCnfg);
 800056c:	4902      	ldr	r1, [pc, #8]	; (8000578 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xd8>)
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <LCD_Config_Data_8Bit_MODE_OUTPUT_PP+0xdc>)
 8000570:	f000 f9b4 	bl	80008dc <MCAL_GPIO_Init>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000003c 	.word	0x2000003c
 800057c:	40010800 	.word	0x40010800

08000580 <wait_ms>:
void wait_ms (int x)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e00b      	b.n	80005a6 <wait_ms+0x26>
		for(j=0;j<255;j++);
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	e002      	b.n	800059a <wait_ms+0x1a>
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	3301      	adds	r3, #1
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2bfe      	cmp	r3, #254	; 0xfe
 800059e:	d9f9      	bls.n	8000594 <wait_ms+0x14>
	for(i=0;i<x;i++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d3ef      	bcc.n	800058e <wait_ms+0xe>
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <LCD_KICK>:
void LCD_KICK(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	//To reset EN
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, ENABLE_SWITCH, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <LCD_KICK+0x28>)
 80005c4:	f000 fa20 	bl	8000a08 <MCAL_GPIO_WritePin>
	wait_ms(50); // using Enable Cycle time in Bus timing characteristics in data sheet
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f7ff ffd9 	bl	8000580 <wait_ms>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, ENABLE_SWITCH, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <LCD_KICK+0x28>)
 80005d6:	f000 fa17 	bl	8000a08 <MCAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800

080005e4 <LCD_GOTO_XY>:
void LCD_GOTO_XY(int line, int position)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	if(line==1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d10c      	bne.n	800060e <LCD_GOTO_XY+0x2a>
	{
		if(position<16 && position >= 0)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	dc09      	bgt.n	800060e <LCD_GOTO_XY+0x2a>
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db06      	blt.n	800060e <LCD_GOTO_XY+0x2a>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	3b80      	subs	r3, #128	; 0x80
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f88f 	bl	800072c <LCD_WRITE_COMMAND>
		}
	}
	if(line==2)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d10c      	bne.n	800062e <LCD_GOTO_XY+0x4a>
	{
		if(position<16 && position >= 0)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b0f      	cmp	r3, #15
 8000618:	dc09      	bgt.n	800062e <LCD_GOTO_XY+0x4a>
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db06      	blt.n	800062e <LCD_GOTO_XY+0x4a>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	3b40      	subs	r3, #64	; 0x40
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f87f 	bl	800072c <LCD_WRITE_COMMAND>
		}
	}

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <LCD_BUSY>:
void LCD_BUSY(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	//Set data port as input to receive data if LCD is busy
	//LCD_Data_DDR &= ~(0xFF << DATA_SHIFT); // D4-D7 if 4-bit mode on LCD
#ifdef EIGHT_BIT_MODE
	LCD_Config_Data_8Bit_MODE_INPUT_FLO();
 800063c:	f7ff fed8 	bl	80003f0 <LCD_Config_Data_8Bit_MODE_INPUT_FLO>
#ifdef FOUR_BIT_MODE
	LCD_Config_Data_4Bit_MODE_INPUT_FLO();
#endif

	//D7 as busy flag (ON if LCD busy, OFF if not busy)
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_SET);		//LCD in Read mode - busy
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000646:	480a      	ldr	r0, [pc, #40]	; (8000670 <LCD_BUSY+0x38>)
 8000648:	f000 f9de 	bl	8000a08 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_RESET);	//LCD in Command mode
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <LCD_BUSY+0x38>)
 8000654:	f000 f9d8 	bl	8000a08 <MCAL_GPIO_WritePin>

	LCD_KICK();
 8000658:	f7ff ffae 	bl	80005b8 <LCD_KICK>
	//set Data port as output
	//LCD_Data_DDR |= (0xFF << DATA_SHIFT);
#ifdef EIGHT_BIT_MODE
	LCD_Config_Data_8Bit_MODE_OUTPUT_PP();
 800065c:	f7ff ff20 	bl	80004a0 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP>
#ifdef FOUR_BIT_MODE
	LCD_Config_Data_4Bit_MODE_OUTPUT_PP();
#endif

	//RW=0 write to LCD Inst Register (RS=0)
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET);	//turn off read mode
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <LCD_BUSY+0x38>)
 8000668:	f000 f9ce 	bl	8000a08 <MCAL_GPIO_WritePin>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40010800 	.word	0x40010800

08000674 <LCD_INIT>:
void LCD_INIT(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000678:	2014      	movs	r0, #20
 800067a:	f7ff ff81 	bl	8000580 <wait_ms>

	//Set RS,RW,EN as OUTPUT
	PinCnfg.GPIO_PinNumber = RS_SWITCH;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <LCD_INIT+0xb0>)
 8000680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000684:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <LCD_INIT+0xb0>)
 8000688:	2204      	movs	r2, #4
 800068a:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <LCD_INIT+0xb0>)
 800068e:	2201      	movs	r2, #1
 8000690:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_GPIO, &PinCnfg);
 8000692:	4924      	ldr	r1, [pc, #144]	; (8000724 <LCD_INIT+0xb0>)
 8000694:	4824      	ldr	r0, [pc, #144]	; (8000728 <LCD_INIT+0xb4>)
 8000696:	f000 f921 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = RW_SWITCH;
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <LCD_INIT+0xb0>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <LCD_INIT+0xb0>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <LCD_INIT+0xb0>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_GPIO, &PinCnfg);
 80006ae:	491d      	ldr	r1, [pc, #116]	; (8000724 <LCD_INIT+0xb0>)
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <LCD_INIT+0xb4>)
 80006b2:	f000 f913 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = ENABLE_SWITCH;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <LCD_INIT+0xb0>)
 80006b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006bc:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <LCD_INIT+0xb0>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <LCD_INIT+0xb0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_GPIO, &PinCnfg);
 80006ca:	4916      	ldr	r1, [pc, #88]	; (8000724 <LCD_INIT+0xb0>)
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <LCD_INIT+0xb4>)
 80006ce:	f000 f905 	bl	80008dc <MCAL_GPIO_Init>

	//	Set Data Pins as OUTPUT
#ifdef EIGHT_BIT_MODE
	LCD_Config_Data_8Bit_MODE_OUTPUT_PP();
 80006d2:	f7ff fee5 	bl	80004a0 <LCD_Config_Data_8Bit_MODE_OUTPUT_PP>
#endif
#ifdef FOUR_BIT_MODE
	LCD_Config_Data_4Bit_MODE_OUTPUT_PP();
#endif

	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <LCD_INIT+0xb4>)
 80006de:	f000 f993 	bl	8000a08 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <LCD_INIT+0xb4>)
 80006ea:	f000 f98d 	bl	8000a08 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, ENABLE_SWITCH, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LCD_INIT+0xb4>)
 80006f6:	f000 f987 	bl	8000a08 <MCAL_GPIO_WritePin>

	wait_ms(15);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f7ff ff40 	bl	8000580 <wait_ms>
	LCD_BUSY();
 8000700:	f7ff ff9a 	bl	8000638 <LCD_BUSY>
	LCD_CLEAR();
 8000704:	f000 f880 	bl	8000808 <LCD_CLEAR>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000708:	2038      	movs	r0, #56	; 0x38
 800070a:	f000 f80f 	bl	800072c <LCD_WRITE_COMMAND>
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(LCD_INIT_4BIT_Mode); //init 4-bit mode
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES); // config for 2 lines for 4-bit mode
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800070e:	2006      	movs	r0, #6
 8000710:	f000 f80c 	bl	800072c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000714:	2080      	movs	r0, #128	; 0x80
 8000716:	f000 f809 	bl	800072c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800071a:	200f      	movs	r0, #15
 800071c:	f000 f806 	bl	800072c <LCD_WRITE_COMMAND>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000003c 	.word	0x2000003c
 8000728:	40010800 	.word	0x40010800

0800072c <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND (unsigned char command)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	LCD_BUSY();
 8000736:	f7ff ff7f 	bl	8000638 <LCD_BUSY>
#ifdef EIGHT_BIT_MODE
	//write command to port
	MCAL_GPIO_WritePort(LCD_Data_GPIO, command);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	b29b      	uxth	r3, r3
 800073e:	4619      	mov	r1, r3
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <LCD_WRITE_COMMAND+0x40>)
 8000742:	f000 f978 	bl	8000a36 <MCAL_GPIO_WritePort>
	//Write to Instruction Register
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <LCD_WRITE_COMMAND+0x40>)
 800074e:	f000 f95b 	bl	8000a08 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <LCD_WRITE_COMMAND+0x40>)
 800075a:	f000 f955 	bl	8000a08 <MCAL_GPIO_WritePin>
	LCD_KICK();
 800075e:	f7ff ff2b 	bl	80005b8 <LCD_KICK>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET);
	wait_ms(1);
	LCD_KICK();
#endif
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40010800 	.word	0x40010800

08000770 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR (unsigned char data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	//LCD_BUSY();
#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_Data_GPIO, data);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <LCD_WRITE_CHAR+0x3c>)
 8000782:	f000 f958 	bl	8000a36 <MCAL_GPIO_WritePort>
	//To write Data to LCD
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET); //RW=0 to write
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <LCD_WRITE_CHAR+0x3c>)
 800078e:	f000 f93b 	bl	8000a08 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_SET);	  //RS=1 for data mode
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <LCD_WRITE_CHAR+0x3c>)
 800079a:	f000 f935 	bl	8000a08 <MCAL_GPIO_WritePin>
	LCD_KICK();
 800079e:	f7ff ff0b 	bl	80005b8 <LCD_KICK>
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RW_SWITCH, GPIO_PIN_RESET); //RW=0 to write
	MCAL_GPIO_WritePin(LCD_CTRL_GPIO, RS_SWITCH, GPIO_PIN_SET);	  //RS=1 for data mode
	wait_ms(1);
	LCD_KICK();
#endif
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010800 	.word	0x40010800

080007b0 <LCD_WRITE_STRING>:
void LCD_WRITE_STRING (char* data)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	int count =0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 80007bc:	e01c      	b.n	80007f8 <LCD_WRITE_STRING+0x48>
	{
		count++;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*data++);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffcf 	bl	8000770 <LCD_WRITE_CHAR>
		if(count == 16)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b10      	cmp	r3, #16
 80007d6:	d104      	bne.n	80007e2 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80007d8:	2100      	movs	r1, #0
 80007da:	2002      	movs	r0, #2
 80007dc:	f7ff ff02 	bl	80005e4 <LCD_GOTO_XY>
 80007e0:	e00a      	b.n	80007f8 <LCD_WRITE_STRING+0x48>
		}
		else if(count == 32)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b20      	cmp	r3, #32
 80007e6:	d107      	bne.n	80007f8 <LCD_WRITE_STRING+0x48>
		{
			LCD_CLEAR();
 80007e8:	f000 f80e 	bl	8000808 <LCD_CLEAR>
			LCD_GOTO_XY(1,0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff fef8 	bl	80005e4 <LCD_GOTO_XY>
			count=0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1de      	bne.n	80007be <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LCD_CLEAR>:
void LCD_CLEAR(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ff8d 	bl	800072c <LCD_WRITE_COMMAND>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}

08000816 <Get_CRLH_Position>:

#include "STM32_F103C6_GPIO_Driver.h"

//Functions Local to driver
uint8_t Get_CRLH_Position (uint16_t PinNumber)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	2b80      	cmp	r3, #128	; 0x80
 8000824:	d042      	beq.n	80008ac <Get_CRLH_Position+0x96>
 8000826:	2b80      	cmp	r3, #128	; 0x80
 8000828:	dc11      	bgt.n	800084e <Get_CRLH_Position+0x38>
 800082a:	2b08      	cmp	r3, #8
 800082c:	d036      	beq.n	800089c <Get_CRLH_Position+0x86>
 800082e:	2b08      	cmp	r3, #8
 8000830:	dc06      	bgt.n	8000840 <Get_CRLH_Position+0x2a>
 8000832:	2b02      	cmp	r3, #2
 8000834:	d02e      	beq.n	8000894 <Get_CRLH_Position+0x7e>
 8000836:	2b04      	cmp	r3, #4
 8000838:	d02e      	beq.n	8000898 <Get_CRLH_Position+0x82>
 800083a:	2b01      	cmp	r3, #1
 800083c:	d028      	beq.n	8000890 <Get_CRLH_Position+0x7a>
 800083e:	e047      	b.n	80008d0 <Get_CRLH_Position+0xba>
 8000840:	2b20      	cmp	r3, #32
 8000842:	d02f      	beq.n	80008a4 <Get_CRLH_Position+0x8e>
 8000844:	2b40      	cmp	r3, #64	; 0x40
 8000846:	d02f      	beq.n	80008a8 <Get_CRLH_Position+0x92>
 8000848:	2b10      	cmp	r3, #16
 800084a:	d029      	beq.n	80008a0 <Get_CRLH_Position+0x8a>
 800084c:	e040      	b.n	80008d0 <Get_CRLH_Position+0xba>
 800084e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000852:	d033      	beq.n	80008bc <Get_CRLH_Position+0xa6>
 8000854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000858:	dc09      	bgt.n	800086e <Get_CRLH_Position+0x58>
 800085a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800085e:	d029      	beq.n	80008b4 <Get_CRLH_Position+0x9e>
 8000860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000864:	d028      	beq.n	80008b8 <Get_CRLH_Position+0xa2>
 8000866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800086a:	d021      	beq.n	80008b0 <Get_CRLH_Position+0x9a>
 800086c:	e030      	b.n	80008d0 <Get_CRLH_Position+0xba>
 800086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000872:	d027      	beq.n	80008c4 <Get_CRLH_Position+0xae>
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000878:	dc03      	bgt.n	8000882 <Get_CRLH_Position+0x6c>
 800087a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800087e:	d01f      	beq.n	80008c0 <Get_CRLH_Position+0xaa>
 8000880:	e026      	b.n	80008d0 <Get_CRLH_Position+0xba>
 8000882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000886:	d01f      	beq.n	80008c8 <Get_CRLH_Position+0xb2>
 8000888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800088c:	d01e      	beq.n	80008cc <Get_CRLH_Position+0xb6>
 800088e:	e01f      	b.n	80008d0 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
	{
		return 0;
 8000890:	2300      	movs	r3, #0
 8000892:	e01e      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_1:
	{
		return 4;
 8000894:	2304      	movs	r3, #4
 8000896:	e01c      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_2:
	{
		return 8;
 8000898:	2308      	movs	r3, #8
 800089a:	e01a      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_3:
	{
		return 12;
 800089c:	230c      	movs	r3, #12
 800089e:	e018      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_4:
	{
		return 16;
 80008a0:	2310      	movs	r3, #16
 80008a2:	e016      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_5:
	{
		return 20;
 80008a4:	2314      	movs	r3, #20
 80008a6:	e014      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_6:
	{
		return 24;
 80008a8:	2318      	movs	r3, #24
 80008aa:	e012      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_7:
	{
		return 28;
 80008ac:	231c      	movs	r3, #28
 80008ae:	e010      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_8:
	{
		return 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	e00e      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_9:
	{
		return 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	e00c      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_10:
	{
		return 8;
 80008b8:	2308      	movs	r3, #8
 80008ba:	e00a      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_11:
	{
		return 12;
 80008bc:	230c      	movs	r3, #12
 80008be:	e008      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_12:
	{
		return 16;
 80008c0:	2310      	movs	r3, #16
 80008c2:	e006      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_13:
	{
		return 20;
 80008c4:	2314      	movs	r3, #20
 80008c6:	e004      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_14:
	{
		return 24;
 80008c8:	2318      	movs	r3, #24
 80008ca:	e002      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	case GPIO_PIN_15:
	{
		return 28;
 80008cc:	231c      	movs	r3, #28
 80008ce:	e000      	b.n	80008d2 <Get_CRLH_Position+0xbc>
		break;
	}
	}
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <MCAL_GPIO_Init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					but LQFP48 package has only GPIO A,B and part of C,D exported as external PINs from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  - configure pins 0 >> 7
	//Port configuration register high (GPIOx_CRH) - configure pins 8 >> 15

	volatile uint32_t* ConfigRegister = NULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d801      	bhi.n	80008fa <MCAL_GPIO_Init+0x1e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	e001      	b.n	80008fe <MCAL_GPIO_Init+0x22>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3304      	adds	r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]

	// clear CNFn[1:0] MODEn[1:0]
	(*ConfigRegister)&=~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff86 	bl	8000816 <Get_CRLH_Position>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	230f      	movs	r3, #15
 8000910:	4093      	lsls	r3, r2
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	401a      	ands	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d00b      	beq.n	800093e <MCAL_GPIO_Init+0x62>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	2b06      	cmp	r3, #6
 800092c:	d007      	beq.n	800093e <MCAL_GPIO_Init+0x62>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	2b05      	cmp	r3, #5
 8000934:	d003      	beq.n	800093e <MCAL_GPIO_Init+0x62>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	789b      	ldrb	r3, [r3, #2]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d10e      	bne.n	800095c <MCAL_GPIO_Init+0x80>
	{
		// set CNFn[1:0] MODEn[1:0]
		PIN_Config = (((PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_OUTPUT_Speed) & 0x0F;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	3b04      	subs	r3, #4
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	b25a      	sxtb	r2, r3
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b25b      	sxtb	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e02c      	b.n	80009b6 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_Analog || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <MCAL_GPIO_Init+0x90>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d107      	bne.n	800097c <MCAL_GPIO_Init+0xa0>
		{
			// set CNFn[1:0] - MODEn[1:0]= 00
			PIN_Config =  ((PinConfig->GPIO_MODE << 2) | 0x0) & 0x0F;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	e01c      	b.n	80009b6 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	2b08      	cmp	r3, #8
 8000982:	d102      	bne.n	800098a <MCAL_GPIO_Init+0xae>
		{
			// set CNFn[1:0] - MODEn[1:0]= 00
			// same as Floating input
			PIN_Config =  ((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0F;
 8000984:	2304      	movs	r3, #4
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e015      	b.n	80009b6 <MCAL_GPIO_Init+0xda>

		}
		else //PU PD Input
		{
			PIN_Config =  ((GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0F;
 800098a:	2308      	movs	r3, #8
 800098c:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d107      	bne.n	80009a6 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber; //PinNumber shifted in macro
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	e007      	b.n	80009b6 <MCAL_GPIO_Init+0xda>
			}
			else //GPIO_MODE == GPIO_MODE_INPUT_PD
			{
				//PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~PinConfig->GPIO_PinNumber;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	8812      	ldrh	r2, [r2, #0]
 80009ae:	43d2      	mvns	r2, r2
 80009b0:	401a      	ands	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*ConfigRegister) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009b6:	7bfc      	ldrb	r4, [r7, #15]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff2a 	bl	8000816 <Get_CRLH_Position>
 80009c2:	4603      	mov	r3, r0
 80009c4:	fa04 f203 	lsl.w	r2, r4, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	601a      	str	r2, [r3, #0]

}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd90      	pop	{r4, r7, pc}

080009da <MCAL_GPIO_ReadPin>:
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_State)
 * Note			-none
 */

uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	807b      	strh	r3, [r7, #2]
	uint8_t pin_value;
	if(((GPIOx->IDR) & PinNumber) != GPIO_PIN_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <MCAL_GPIO_ReadPin+0x1e>
	{
		pin_value = GPIO_PIN_SET;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e001      	b.n	80009fc <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		pin_value = GPIO_PIN_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
	}
	return pin_value;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <MCAL_GPIO_WritePin>:
 * @retval 		-none
 * Note			-none
 */

void MCAL_GPIO_WritePin (GPIO_TypeDef* GPIOx, uint16_t PinNumber, uint8_t value)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
 8000a14:	4613      	mov	r3, r2
 8000a16:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8000a18:	787b      	ldrb	r3, [r7, #1]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <MCAL_GPIO_WritePin+0x1e>
		//		or
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;	//write directly without read
 8000a1e:	887a      	ldrh	r2, [r7, #2]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000a24:	e002      	b.n	8000a2c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000a26:	887a      	ldrh	r2, [r7, #2]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	615a      	str	r2, [r3, #20]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <MCAL_GPIO_WritePort>:
 * @retval 		-none
 * Note			-none
 */

void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint16_t value)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60da      	str	r2, [r3, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
	...

08000a54 <clock_init>:
#define SEVEN	0x78
#define EIGHT	0x00
#define NINE	0x10

void clock_init()
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	//Enable RCC CLK to GPIOA, bit2
	RCC_GPIOA_CLK_EN();
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <clock_init+0x24>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <clock_init+0x24>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6193      	str	r3, [r2, #24]
	//Enable RCC CLK to GPIOB, bit3
	RCC_GPIOB_CLK_EN();
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <clock_init+0x24>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <clock_init+0x24>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6193      	str	r3, [r2, #24]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000

08000a7c <SEG_GPIO_INIT>:
	return 0;
}
 */

void SEG_GPIO_INIT()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCnfg;
	PinCnfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a86:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000a96:	f7ff ff21 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9e:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000aae:	f7ff ff15 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_11;
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000abc:	2301      	movs	r3, #1
 8000abe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481b      	ldr	r0, [pc, #108]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000ac6:	f7ff ff09 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_12;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4815      	ldr	r0, [pc, #84]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000ade:	f7ff fefd 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_13;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000aec:	2301      	movs	r3, #1
 8000aee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	480f      	ldr	r0, [pc, #60]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000af6:	f7ff fef1 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_14;
 8000afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000afe:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b00:	2304      	movs	r3, #4
 8000b02:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000b04:	2301      	movs	r3, #1
 8000b06:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000b0e:	f7ff fee5 	bl	80008dc <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = GPIO_PIN_15;
 8000b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b16:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <SEG_GPIO_INIT+0xb8>)
 8000b26:	f7ff fed9 	bl	80008dc <MCAL_GPIO_Init>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <main>:
int main (void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
	clock_init();
 8000b3e:	f7ff ff89 	bl	8000a54 <clock_init>
	LCD_INIT();
 8000b42:	f7ff fd97 	bl	8000674 <LCD_INIT>
	KEYPAD_INIT();
 8000b46:	f7ff fb13 	bl	8000170 <KEYPAD_INIT>
	SEG_GPIO_INIT();
 8000b4a:	f7ff ff97 	bl	8000a7c <SEG_GPIO_INIT>

	char pressed_key;

	uint8_t seg[] = {0x40, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};
 8000b4e:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <main+0xb0>)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b56:	c303      	stmia	r3!, {r0, r1}
 8000b58:	801a      	strh	r2, [r3, #0]
	uint8_t LCD[] = {'0','1','2','3','4','5','6','7','8','9'};
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <main+0xb4>)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b60:	c303      	stmia	r3!, {r0, r1}
 8000b62:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0; i<10; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	75fb      	strb	r3, [r7, #23]
 8000b68:	e01c      	b.n	8000ba4 <main+0x6c>
	{
		MCAL_GPIO_WritePort(GPIOB, seg[i]<<9);
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	f107 0218 	add.w	r2, r7, #24
 8000b70:	4413      	add	r3, r2
 8000b72:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	025b      	lsls	r3, r3, #9
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <main+0xb8>)
 8000b80:	f7ff ff59 	bl	8000a36 <MCAL_GPIO_WritePort>
		LCD_WRITE_CHAR(LCD[i]);
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	f107 0218 	add.w	r2, r7, #24
 8000b8a:	4413      	add	r3, r2
 8000b8c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fded 	bl	8000770 <LCD_WRITE_CHAR>
		wait_ms(1000);
 8000b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9a:	f7ff fcf1 	bl	8000580 <wait_ms>
	for (uint8_t i=0; i<10; i++)
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	75fb      	strb	r3, [r7, #23]
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b09      	cmp	r3, #9
 8000ba8:	d9df      	bls.n	8000b6a <main+0x32>

	}

	LCD_CLEAR();
 8000baa:	f7ff fe2d 	bl	8000808 <LCD_CLEAR>
	LCD_WRITE_STRING("Keypad Ready");
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <main+0xbc>)
 8000bb0:	f7ff fdfe 	bl	80007b0 <LCD_WRITE_STRING>
	wait_ms(1000);
 8000bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb8:	f7ff fce2 	bl	8000580 <wait_ms>
	LCD_CLEAR();
 8000bbc:	f7ff fe24 	bl	8000808 <LCD_CLEAR>
	while (1)
	{
		pressed_key = KEYPAD_GET_CHAR();
 8000bc0:	f7ff fb4c 	bl	800025c <KEYPAD_GET_CHAR>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	75bb      	strb	r3, [r7, #22]
		switch(pressed_key)
 8000bc8:	7dbb      	ldrb	r3, [r7, #22]
 8000bca:	2b21      	cmp	r3, #33	; 0x21
 8000bcc:	d002      	beq.n	8000bd4 <main+0x9c>
 8000bce:	2b4e      	cmp	r3, #78	; 0x4e
 8000bd0:	d008      	beq.n	8000be4 <main+0xac>
 8000bd2:	e002      	b.n	8000bda <main+0xa2>
		{
		case '!':
		{
			LCD_CLEAR();
 8000bd4:	f7ff fe18 	bl	8000808 <LCD_CLEAR>
			break;
 8000bd8:	e005      	b.n	8000be6 <main+0xae>
		{
			break;
		}
		default:
		{
			LCD_WRITE_CHAR(pressed_key);
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fdc7 	bl	8000770 <LCD_WRITE_CHAR>
			break;
 8000be2:	e000      	b.n	8000be6 <main+0xae>
			break;
 8000be4:	bf00      	nop
		pressed_key = KEYPAD_GET_CHAR();
 8000be6:	e7eb      	b.n	8000bc0 <main+0x88>
 8000be8:	08000cbc 	.word	0x08000cbc
 8000bec:	08000cc8 	.word	0x08000cc8
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	08000cac 	.word	0x08000cac

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bfc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c26:	f000 f811 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff ff85 	bl	8000b38 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c3c:	08000cdc 	.word	0x08000cdc
  ldr r2, =_sbss
 8000c40:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c44:	20000040 	.word	0x20000040

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4e0c      	ldr	r6, [pc, #48]	; (8000c84 <__libc_init_array+0x38>)
 8000c52:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c54:	1ba4      	subs	r4, r4, r6
 8000c56:	10a4      	asrs	r4, r4, #2
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	f000 f81a 	bl	8000c94 <_init>
 8000c60:	2500      	movs	r5, #0
 8000c62:	4e0a      	ldr	r6, [pc, #40]	; (8000c8c <__libc_init_array+0x40>)
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <__libc_init_array+0x44>)
 8000c66:	1ba4      	subs	r4, r4, r6
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c74:	4798      	blx	r3
 8000c76:	3501      	adds	r5, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c7e:	4798      	blx	r3
 8000c80:	3501      	adds	r5, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	08000cd4 	.word	0x08000cd4
 8000c88:	08000cd4 	.word	0x08000cd4
 8000c8c:	08000cd4 	.word	0x08000cd4
 8000c90:	08000cd8 	.word	0x08000cd8

08000c94 <_init>:
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c96:	bf00      	nop
 8000c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9a:	bc08      	pop	{r3}
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	4770      	bx	lr

08000ca0 <_fini>:
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	bf00      	nop
 8000ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca6:	bc08      	pop	{r3}
 8000ca8:	469e      	mov	lr, r3
 8000caa:	4770      	bx	lr
