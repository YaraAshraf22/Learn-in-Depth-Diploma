
U7_L1_Section_Tasks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076b  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000599  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000354  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	//Set LED PINs (LED0-2 > PD5-7) as o/p
	SET_BIT(DDRD,5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,6);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,7);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	81 bb       	out	0x11, r24	; 17
	
	//Relay1 > Buzzer > PD4 as o/p
	SET_BIT(DDRD,4);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 61       	ori	r24, 0x10	; 16
  82:	81 bb       	out	0x11, r24	; 17
	
	//Set pins as (PB0-1	> PD0-1) i/p
	CLEAR_BIT(DDRD,0);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	81 bb       	out	0x11, r24	; 17
	CLEAR_BIT(DDRD,1);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	81 bb       	out	0x11, r24	; 17
	//Disable Pull up
	CLEAR_BIT(PORTD,0);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	82 bb       	out	0x12, r24	; 18
	CLEAR_BIT(PORTD,1);
  96:	82 b3       	in	r24, 0x12	; 18
  98:	8d 7f       	andi	r24, 0xFD	; 253
  9a:	82 bb       	out	0x12, r24	; 18
	
	//INT0 > PD2 > PB2
	//INT0 Rising edge
	SET_BIT(INT_MCUCR,0);
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(INT_MCUCR,1);
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	85 bf       	out	0x35, r24	; 53
	//INT0 Enable
	SET_BIT(INT_GICR,6);
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8b bf       	out	0x3b, r24	; 59
	//Global INT EN
	SET_BIT(INT_SREG,7);
  ae:	8f b7       	in	r24, 0x3f	; 63
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8f bf       	out	0x3f, r24	; 63
#include <avr/interrupt.h>



int main(void)
{
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
	int count=0;
	
	while (1)
	{
		//Task1
		if(READ_BIT(PIND,0))
  b8:	80 9b       	sbis	0x10, 0	; 16
  ba:	3f c0       	rjmp	.+126    	; 0x13a <main+0xce>
		{
			SET_BIT(PORTD,5);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	97 e0       	ldi	r25, 0x07	; 7
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
			_delay_ms(300);
			SET_BIT(PORTD,6);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	82 bb       	out	0x12, r24	; 18
  da:	4f ef       	ldi	r20, 0xFF	; 255
  dc:	82 e5       	ldi	r24, 0x52	; 82
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	41 50       	subi	r20, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x74>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x7e>
  ea:	00 00       	nop
			_delay_ms(300);
			SET_BIT(PORTD,7);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  f4:	82 e5       	ldi	r24, 0x52	; 82
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x8c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x96>
 102:	00 00       	nop
			_delay_ms(300);
			CLEAR_BIT(PORTD,7);
 104:	82 b3       	in	r24, 0x12	; 18
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	82 bb       	out	0x12, r24	; 18
 10a:	4f ef       	ldi	r20, 0xFF	; 255
 10c:	82 e5       	ldi	r24, 0x52	; 82
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	41 50       	subi	r20, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0xa4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0xae>
 11a:	00 00       	nop
			_delay_ms(300);
			CLEAR_BIT(PORTD,6);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 7b       	andi	r24, 0xBF	; 191
 120:	82 bb       	out	0x12, r24	; 18
 122:	4f ef       	ldi	r20, 0xFF	; 255
 124:	82 e5       	ldi	r24, 0x52	; 82
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	41 50       	subi	r20, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0xbc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xc6>
 132:	00 00       	nop
			_delay_ms(300);
			CLEAR_BIT(PORTD,5);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	82 bb       	out	0x12, r24	; 18
		}
		//Task2
		if(READ_BIT(PIND,1))
 13a:	81 9b       	sbis	0x10, 1	; 16
 13c:	bd cf       	rjmp	.-134    	; 0xb8 <main+0x4c>
		{
			count++;
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
			switch(count)
 142:	22 30       	cpi	r18, 0x02	; 2
 144:	31 05       	cpc	r19, r1
 146:	51 f0       	breq	.+20     	; 0x15c <main+0xf0>
 148:	23 30       	cpi	r18, 0x03	; 3
 14a:	31 05       	cpc	r19, r1
 14c:	59 f0       	breq	.+22     	; 0x164 <main+0xf8>
 14e:	21 30       	cpi	r18, 0x01	; 1
 150:	31 05       	cpc	r19, r1
 152:	59 f4       	brne	.+22     	; 0x16a <main+0xfe>
			{
				case 1:
				{
					SET_BIT(PORTD,5);
 154:	82 b3       	in	r24, 0x12	; 18
 156:	80 62       	ori	r24, 0x20	; 32
 158:	82 bb       	out	0x12, r24	; 18
					break;
 15a:	07 c0       	rjmp	.+14     	; 0x16a <main+0xfe>
				}
				case 2:
				{
					SET_BIT(PORTD,6);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	82 bb       	out	0x12, r24	; 18
					break;
 162:	03 c0       	rjmp	.+6      	; 0x16a <main+0xfe>
				}
				case 3:
				{
					SET_BIT(PORTD,7);
 164:	82 b3       	in	r24, 0x12	; 18
 166:	80 68       	ori	r24, 0x80	; 128
 168:	82 bb       	out	0x12, r24	; 18
 16a:	4f ef       	ldi	r20, 0xFF	; 255
 16c:	89 e6       	ldi	r24, 0x69	; 105
 16e:	98 e1       	ldi	r25, 0x18	; 24
 170:	41 50       	subi	r20, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x104>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x10e>
 17a:	00 00       	nop
					break;
				}
			}
			_delay_ms(1000);
			if(count==3)
 17c:	23 30       	cpi	r18, 0x03	; 3
 17e:	31 05       	cpc	r19, r1
 180:	09 f0       	breq	.+2      	; 0x184 <main+0x118>
 182:	9a cf       	rjmp	.-204    	; 0xb8 <main+0x4c>
			{
				count=0;
				CLEAR_BIT(PORTD,5);
 184:	82 b3       	in	r24, 0x12	; 18
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	82 bb       	out	0x12, r24	; 18
				CLEAR_BIT(PORTD,6);
 18a:	82 b3       	in	r24, 0x12	; 18
 18c:	8f 7b       	andi	r24, 0xBF	; 191
 18e:	82 bb       	out	0x12, r24	; 18
				CLEAR_BIT(PORTD,7);
 190:	82 b3       	in	r24, 0x12	; 18
 192:	8f 77       	andi	r24, 0x7F	; 127
 194:	82 bb       	out	0x12, r24	; 18
 196:	8e cf       	rjmp	.-228    	; 0xb4 <main+0x48>

00000198 <__vector_1>:
	}
}

//Task3
ISR(INT0_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
	SET_BIT(PORTD,4);
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	82 bb       	out	0x12, r24	; 18
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 e6       	ldi	r24, 0x69	; 105
 1b2:	98 e1       	ldi	r25, 0x18	; 24
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <__vector_1+0x1c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <__vector_1+0x26>
 1be:	00 00       	nop
	_delay_ms(1000);
	CLEAR_BIT(PORTD,4);
 1c0:	82 b3       	in	r24, 0x12	; 18
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	82 bb       	out	0x12, r24	; 18
}
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
