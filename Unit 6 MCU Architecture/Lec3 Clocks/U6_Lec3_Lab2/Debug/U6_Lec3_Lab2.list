
U6_Lec3_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000308  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000308  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000df  00000000  00000000  00010331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000008d  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  000104a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  000104f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f2c  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000444  00000000  00000000  00011454  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003c1a  00000000  00000000  00011898  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000154b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00015530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002e8 	.word	0x080002e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002e8 	.word	0x080002e8

08000170 <clock_init>:


#define clock_mode 1

void clock_init ()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
			0010: PLL input clock x 4
			0011: PLL input clock x 5
			0100: PLL input clock x 6
			0101: PLL input clock x 7
			0110: PLL input clock x 8*/
		RCC_CFGR |= (0b0110<<18);
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <clock_init+0x60>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a15      	ldr	r2, [pc, #84]	; (80001d0 <clock_init+0x60>)
 800017a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800017e:	6013      	str	r3, [r2, #0]
			0xx: HCLK not divided
			100: HCLK divided by 2
			101: HCLK divided by 4
			110: HCLK divided by 8
			111: HCLK divided by 16*/
		RCC_CFGR |= (0b101<<11);
 8000180:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <clock_init+0x60>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <clock_init+0x60>)
 8000186:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800018a:	6013      	str	r3, [r2, #0]
			0xx: HCLK not divided
			100: HCLK divided by 2
			101: HCLK divided by 4
			110: HCLK divided by 8
			111: HCLK divided by 16*/
		RCC_CFGR |= (0b100<<8);
 800018c:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <clock_init+0x60>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <clock_init+0x60>)
 8000192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000196:	6013      	str	r3, [r2, #0]
			1011: SYSCLK divided by 16
			1100: SYSCLK divided by 64
			1101: SYSCLK divided by 128
			1110: SYSCLK divided by 256
			1111: SYSCLK divided by 512*/
		RCC_CFGR |= (0b0000<<4);
 8000198:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <clock_init+0x60>)
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <clock_init+0x60>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6013      	str	r3, [r2, #0]
			System is enabled).
			00: HSI selected as system clock
			01: HSE selected as system clock
			10: PLL selected as system clock
			11: not allowed*/
		RCC_CFGR |= (0b10<<0);
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <clock_init+0x60>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a0a      	ldr	r2, [pc, #40]	; (80001d0 <clock_init+0x60>)
 80001a6:	f043 0302 	orr.w	r3, r3, #2
 80001aa:	6013      	str	r3, [r2, #0]
			Set and cleared by software to enable PLL.
			Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
			PLL clock is used as system clock or is selected to become the system clock.
			0: PLL OFF
			1: PLL ON*/
		RCC_CR |= 1<<24;
 80001ac:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <clock_init+0x64>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a08      	ldr	r2, [pc, #32]	; (80001d4 <clock_init+0x64>)
 80001b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001b6:	6013      	str	r3, [r2, #0]


		break;
 80001b8:	bf00      	nop
	}
	}

	//To enable clock to GPIOA
	RCC_APB2ENR |= 1<<2;
 80001ba:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <clock_init+0x68>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <clock_init+0x68>)
 80001c0:	f043 0304 	orr.w	r3, r3, #4
 80001c4:	6013      	str	r3, [r2, #0]
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	40021004 	.word	0x40021004
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40021018 	.word	0x40021018

080001dc <main>:
int main (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0

	clock_init();
 80001e2:	f7ff ffc5 	bl	8000170 <clock_init>

	//Init GPIOA
	GPIOA_CRH &=0xFF0FFFFF; //clear 20 to 24
 80001e6:	4b17      	ldr	r3, [pc, #92]	; (8000244 <main+0x68>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a16      	ldr	r2, [pc, #88]	; (8000244 <main+0x68>)
 80001ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |=0x00200000; //write 2
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <main+0x68>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <main+0x68>)
 80001f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001fc:	6013      	str	r3, [r2, #0]

	int i;
	while (1)
	{
		GPIOA_ODR |=1<<13;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <main+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a11      	ldr	r2, [pc, #68]	; (8000248 <main+0x6c>)
 8000204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000208:	6013      	str	r3, [r2, #0]
		for(i=0;i<5000;i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <main+0x3a>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f241 3287 	movw	r2, #4999	; 0x1387
 800021c:	4293      	cmp	r3, r2
 800021e:	ddf7      	ble.n	8000210 <main+0x34>
		GPIOA_ODR &=~(1<<13);
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <main+0x6c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <main+0x6c>)
 8000226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800022a:	6013      	str	r3, [r2, #0]
		for(i=0;i<5000;i++);
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e002      	b.n	8000238 <main+0x5c>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f241 3287 	movw	r2, #4999	; 0x1387
 800023e:	4293      	cmp	r3, r2
 8000240:	ddf7      	ble.n	8000232 <main+0x56>
		GPIOA_ODR |=1<<13;
 8000242:	e7dc      	b.n	80001fe <main+0x22>
 8000244:	40010804 	.word	0x40010804
 8000248:	4001080c 	.word	0x4001080c

0800024c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000250:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <LoopForever+0x6>)
  ldr r1, =_edata
 8000256:	490d      	ldr	r1, [pc, #52]	; (800028c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <LoopForever+0xe>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <LoopForever+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027a:	f000 f811 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ffad 	bl	80001dc <main>

08000282 <LoopForever>:

LoopForever:
    b LoopForever
 8000282:	e7fe      	b.n	8000282 <LoopForever>
  ldr   r0, =_estack
 8000284:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	2000001c 	.word	0x2000001c

0800029c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC1_2_IRQHandler>
	...

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	2500      	movs	r5, #0
 80002a4:	4e0c      	ldr	r6, [pc, #48]	; (80002d8 <__libc_init_array+0x38>)
 80002a6:	4c0d      	ldr	r4, [pc, #52]	; (80002dc <__libc_init_array+0x3c>)
 80002a8:	1ba4      	subs	r4, r4, r6
 80002aa:	10a4      	asrs	r4, r4, #2
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	f000 f81a 	bl	80002e8 <_init>
 80002b4:	2500      	movs	r5, #0
 80002b6:	4e0a      	ldr	r6, [pc, #40]	; (80002e0 <__libc_init_array+0x40>)
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <__libc_init_array+0x44>)
 80002ba:	1ba4      	subs	r4, r4, r6
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c8:	4798      	blx	r3
 80002ca:	3501      	adds	r5, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d2:	4798      	blx	r3
 80002d4:	3501      	adds	r5, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
